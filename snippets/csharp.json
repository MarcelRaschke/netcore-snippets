{
	"Create app.Use": {
		"prefix": "app-use",
		"body": [
			"${1:app}.Use(async (context, next) => {",
			"    await context.Response.WriteAsync(\"$0${2:text}\");",
			"    await next();",
			"});"
		],
		"description": "Create app.Use() usage"
	},
	"Create app.Run": {
		"prefix": "app-run",
		"body": [
			"${1:app}.Run(async (context) => {",
			"    await context.Response.WriteAsync(\"$0${2:text}\");",
			"});"
		],
		"description": "Create app.Use() usage"
	},
	"Create app.Map": {
		"prefix": "app-map",
		"body": [
			"${1:app}.Map(\"/${2:path}\", (app1) =>",
			"{",
			"    $0",
			"});"
		],
		"description": "Create app.Use() usage"
	},
	"Create Program.cs": {
		"prefix": "ac-program-cs",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.IO;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"using Microsoft.AspNetCore;",
			"using Microsoft.AspNetCore.Hosting;",
			"using Microsoft.Extensions.Configuration;",
			"using Microsoft.Extensions.Logging;",
			"",
			"namespace ${1:${TM_DIRECTORY/^.*[\\\\\\/]([^\\\\\\\\/]+)$/$1/}}",
			"{",
			"    public class Program",
			"    {",
			"        public static void Main(string[] args)",
			"        {",
			"            CreateWebHostBuilder(args).Build().Run();$0",
			"        }",
			"",
			"        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>",
			"            WebHost.CreateDefaultBuilder(args)",
			"                .UseStartup<Startup>();",
			"    }",
			"}",
			""
		],
		"description": "Create IWebHost"
	},
	"Create IWebHostBuilder": {
		"prefix": "ac-program-main",
		"body": [
			"        public static void Main(string[] args)",
			"        {",
			"            WebHost.CreateDefaultBuilder(args)",
			"                .UseStartup<Startup>();",
			"                .Build()",
			"                .Run();$0",
			"        }",
			""
		],
		"description": "Create IWebHost"
	},
	"Create Full IWebHostBuilder": {
		"prefix": "ac-program-main-full",
		"body": [
			"            var builder = new WebHostBuilder()",
			"                .UseKestrel((builderContext, options) =>",
			"                {",
			"                    options.Configure(builderContext.Configuration.GetSection(\"Kestrel\"));",
			"                })",
			"                .UseContentRoot(Directory.GetCurrentDirectory())",
			"                .ConfigureAppConfiguration((hostingContext, config) =>",
			"                {",
			"                    var env = hostingContext.HostingEnvironment;",
			"",
			"                    config.AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)",
			"                          .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true, reloadOnChange: true);",
			"",
			"                    if (env.IsDevelopment())",
			"                    {",
			"                        var appAssembly = Assembly.Load(new AssemblyName(env.ApplicationName));",
			"                        if (appAssembly != null)",
			"                        {",
			"                            config.AddUserSecrets(appAssembly, optional: true);",
			"                        }",
			"                    }",
			"",
			"                    config.AddEnvironmentVariables();",
			"",
			"                    if (args != null)",
			"                    {",
			"                        config.AddCommandLine(args);",
			"                    }",
			"                })",
			"                .ConfigureLogging((hostingContext, logging) =>",
			"                {",
			"                    logging.AddConfiguration(hostingContext.Configuration.GetSection(\"Logging\"));",
			"                    logging.AddConsole();",
			"                    logging.AddDebug();",
			"                })",
			"                .UseIISIntegration()",
			"                .UseDefaultServiceProvider((context, options) =>",
			"                {",
			"                    options.ValidateScopes = context.HostingEnvironment.IsDevelopment();",
			"                });",
			"",
			"            if (args != null)",
			"            {",
			"                builder.UseConfiguration(new ConfigurationBuilder().AddCommandLine(args).Build());",
			"            }",
			"",
			"            builder.UseStartup<Startup>().Build().Run();"
		],
		"description": "Create Full IWebHost"
	},
	"DbContext": {
		"prefix": "ef-dbcontext",
		"body": [
			"using Microsoft.EntityFrameworkCore;",
			"",
			"namespace ${1:${TM_DIRECTORY/^.*[\\\\\\/]([^\\\\\\/]+)[\\\\\\/][^\\\\\\/]+$/$1/}}.Models {",
			"    public class ${2:${TM_FILENAME_BASE}} : DbContext {",
			"        public ${2} (DbContextOptions<${2}> options) : base (options) { }",
			"        public DbSet<${3:EntityName}> ${4:${3}s}$0 { get; set; }",
			"    }",
			"}"
		],
		"description": "Create a DbContext class under Models/ folder"
	},
	"Create API Controller": {
		"prefix": "ac-api-controller",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"using Microsoft.AspNetCore.Mvc;",
			"${5://}using ${1:${TM_DIRECTORY/^.*[\\\\\\/]([^\\\\\\/]+)[\\\\\\/][^\\\\\\/]+$/$1/}}.Models;",
			"",
			"namespace ${1}.Controllers",
			"{",
			"    [Route(\"api/[controller]\")]",
			"    [ApiController]",
			"    public class ${2:${TM_FILENAME_BASE/Controller//}}Controller : ControllerBase",
			"    {",
			"        public ${2}Controller($0)",
			"        {",
			"        }",
			"",
			"        // GET api/${3:${TM_FILENAME_BASE/(.*)Controller/${1:/downcase}/}}",
			"        [HttpGet(\"\")]",
			"        public ActionResult<IEnumerable<${4:string}>> Get${4}s()",
			"        {",
			"            return new List<${4}> { };",
			"        }",
			"",
			"        // GET api/${3}/5",
			"        [HttpGet(\"{id}\")]",
			"        public ActionResult<${4:${2}}> Get${4}ById(int id)",
			"        {",
			"            return null;",
			"        }",
			"",
			"        // POST api/${3}",
			"        [HttpPost(\"\")]",
			"        public void Post${4}(${4:${2}} value)",
			"        {",
			"        }",
			"",
			"        // PUT api/${3}/5",
			"        [HttpPut(\"{id}\")]",
			"        public void Put${4}(int id, ${4:${2}} value)",
			"        {",
			"        }",
			"",
			"        // DELETE api/${3}/5",
			"        [HttpDelete(\"{id}\")]",
			"        public void Delete${4}ById(int id)",
			"        {",
			"        }",
			"    }",
			"}"
		],
		"description": "Create API Controller"
	},
	"Create API action method: GET": {
		"prefix": "ac-api-action",
		"body": [
			"[HttpGet(\"${1}\")]",
			"public ActionResult<IEnumerable<${2:string}>> Get${3}() {",
			"    $0",
			"}",
			""
		],
		"description": "Create a API action method"
	},
	"Create MVC Action": {
		"prefix": "ac-mvc-action",
		"body": [
			"public IActionResult ${1:ActionName}()",
			"{",
			"    // TODO: Your code here",
			"    return View();",
			"}",
			""
		],
		"description": "Create a MVC action method"
	},
	"Create MVC Async Action": {
		"prefix": "ac-mvc-action-async",
		"body": [
			"public async Task<IActionResult> ${1:ActionName}()",
			"{",
			"    // TODO: Your code here",
			"    await Task.Yield();",
			"    return View();",
			"}",
			""
		],
		"description": "Create a MVC Async Action"
	},
	"Create API action method: POST": {
		"prefix": "ac-api-action-post",
		"body": [
			"[HttpPost(\"${1}\")]",
			"public void Post${2}([FromBody] ${3:string} value) {",
			"    $0",
			"}",
			""
		],
		"description": "Create a API action method: POST"
	},
	"Create API action method: PUT": {
		"prefix": "ac-api-action-put",
		"body": [
			"[HttpPut(\"${1}/{id}\")]",
			"public void Put${2}(int id, [FromBody] ${3:string} value) {",
			"    $0",
			"}",
			""
		],
		"description": "Create a API action method: PUT"
	},
	"Create API action method: DELETE": {
		"prefix": "ac-api-action-delete",
		"body": [
			"[HttpDelete(\"${1}/{id}\")]",
			"public void Delete${2}ById(int id) {",
			"    $0",
			"}",
			""
		],
		"description": "Create a API action method: DELETE"
	},
	"Startup.cs": {
		"prefix": "ac-startup",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"using Microsoft.AspNetCore.Builder;",
			"using Microsoft.AspNetCore.Hosting;",
			"using Microsoft.AspNetCore.HttpsPolicy;",
			"using Microsoft.AspNetCore.Mvc;",
			"using Microsoft.Extensions.Configuration;",
			"using Microsoft.Extensions.DependencyInjection;",
			"using Microsoft.Extensions.Logging;",
			"using Microsoft.Extensions.Options;",
			"",
			"namespace ${1:${TM_DIRECTORY/^.*[\\\\\\/]([^\\\\\\\\/]+)$/$1/}}",
			"{",
			"    public class Startup",
			"    {",
			"        public Startup(IConfiguration configuration)",
			"        {",
			"            Configuration = configuration;",
			"        }",
			"",
			"        public IConfiguration Configuration { get; }",
			"",
			"        // This method gets called by the runtime. Use this method to add services to the container.",
			"        public void ConfigureServices(IServiceCollection services)",
			"        {",
			"            $0",
			"            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);",
			"        }",
			"",
			"        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.",
			"        public void Configure(IApplicationBuilder app, IHostingEnvironment env)",
			"        {",
			"            if (env.IsDevelopment())",
			"            {",
			"                app.UseDeveloperExceptionPage();",
			"            }",
			"            else",
			"            {",
			"                app.UseHsts();",
			"            }",
			"",
			"            // app.UseHttpsRedirection();",
			"            app.UseMvc();",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "Snippet Description"
	},
	"service.AddDbContext-UseSqlServer": {
		"prefix": "services-add-dbcontext",
		"body": [
			"// using Microsoft.EntityFrameworkCore;",
			"services.AddDbContext<${1:ContextName}Context>(options =>",
			"    options.UseSqlServer(Configuration.GetConnectionString(\"${2:DefaultConnection}\")));",
			"$0"
		],
		"description": "Startup: services.AddDbContext() with UseSqlServer in ConfigureServices() method"
	},
	"service.AddDbContext-UseInMemoryDatabase": {
		"prefix": "services-add-dbcontext-inmemory",
		"body": [
			"services.AddDbContext<${1:ContextName}Context>(options =>",
			"    options.UseInMemoryDatabase(\"${2:name}\"));",
			"$0"
		],
		"description": "Startup: services.AddDbContext() with UseInMemoryDatabase in ConfigureServices() method"
	},
	"service.AddMvc()": {
		"prefix": "services-add-mvc",
		"body": [
			"services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);"
		],
		"description": "Startup: services.AddMvc() on ConfigureServices()"
	},
	"service.AddMvc() with AddJsonOptions() with Converts": {
		"prefix": "services-add-mvc-json-converters",
		"body": [
			"services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1)",
			"    .AddJsonOptions(opt => {",
			"        opt.SerializerSettings.Converters.Add(new ${1:Converter}());",
			"    });"
		],
		"description": "Startup: services.AddMvc() on ConfigureServices()"
	},
	"service.AddMvc() with AddJsonOptions() with DefaultContractResolver": {
		"prefix": "services-add-mvc-json-default",
		"body": [
			"services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1)",
			"    .AddJsonOptions(opt => {",
			"        opt.SerializerSettings.ContractResolver = new DefaultContractResolver();",
			"    });"
		],
		"description": "Startup: services.AddMvc() on ConfigureServices()"
	},
	"service.AddMvc() with AddJsonOptions() with CamelCasePropertyNamesContractResolver": {
		"prefix": "services-add-mvc-json-camel",
		"body": [
			"services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1)",
			"    .AddJsonOptions(opt => {",
			"        opt.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();",
			"    });"
		],
		"description": "Startup: services.AddMvc() on ConfigureServices()"
	},
	"services.AddSpaStaticFiles()": {
		"prefix": "services-add-spastaticfiles",
		"body": [
			"// In production, the Angular files will be served from this directory",
			"services.AddSpaStaticFiles(configuration =>",
			"{",
			"    configuration.RootPath = \"ClientApp/dist\";",
			"});"
		],
		"description": "Startup: services.AddSpaStaticFiles()"
	},
	"service.AddTransient() with Interface": {
		"prefix": "services-add-transient-1",
		"body": [
			"services.AddTransient<I${1:TypeName}, ${2:${1}}>();",
			"$0"
		],
		"description": "Startup: services.AddTransient<I, T>()"
	},
	"service.AddTransient() with Class": {
		"prefix": "services-add-transient-2",
		"body": [
			"services.AddTransient<${1:TypeName}, ${2:${1}}>();",
			"$0"
		],
		"description": "Startup: services.AddTransient<T, T>()"
	},
	"service.AddScoped()": {
		"prefix": "services-add-scoped",
		"body": [
			"services.AddScoped<I${1:TypeName}, ${2:${1}}>();",
			"$0"
		],
		"description": "Startup: services.AddScoped<I, T>()"
	},
	"service.AddSingleton()": {
		"prefix": "services-add-singleton-1",
		"body": [
			"services.AddSingleton<I${1:TypeName}, ${2:${1}}>();",
			"$0"
		],
		"description": "Startup: services.AddSingleton<I, T>()"
	},
	"service.AddSingleton<T>(instance)": {
		"prefix": "services-add-singleton-2",
		"body": [
			"services.AddSingleton<I${1:Configuration}>(${2:${1}});",
			"$0"
		],
		"description": "Startup: services.AddSingleton<I>(T)"
	},
	"service.AddSingleton<T>(new_instance)": {
		"prefix": "services-add-singleton-3",
		"body": [
			"services.AddSingleton<I${1:Configuration}>(new ${2:${1}}($3));",
			"$0"
		],
		"description": "Startup: services.AddSingleton<I>(new T() "
	},
	"service.AddSingleton<T>(FactoryMethod)": {
		"prefix": "services-add-singleton-4",
		"body": [
			"services.AddSingleton<I${1:Configuration}>((sp) => {",
			"    $0",
			"    return new ${2:${1}}($3);",
			"});"
		],
		"description": "Startup: services.AddSingleton<I>(new T() "
	},
	"app.UseSpa": {
		"prefix": "app-use-spa",
		"body": [
			"app.UseSpa(spa =>",
			"{",
			"    // To learn more about options for serving an Angular SPA from ASP.NET Core,",
			"    // see https://go.microsoft.com/fwlink/?linkid=864501",
			"",
			"    spa.Options.SourcePath = \"ClientApp\";",
			"",
			"    // https://docs.microsoft.com/en-us/aspnet/core/spa/angular?view=aspnetcore-2.1&tabs=visual-studio#server-side-rendering",
			"    // https://github.com/maciejtreder/ng-toolkit/tree/master/schematics/universal",
			"    spa.UseSpaPrerendering(options =>",
			"    {",
			"        options.BootModulePath = \\$\"{spa.Options.SourcePath}/dist-server/main.bundle.js\";",
			"        options.BootModuleBuilder = env.IsDevelopment()",
			"            ? new AngularCliBuilder(npmScript: \"build:prod\")",
			"            : null;",
			"        options.ExcludeUrls = new[] { \"/sockjs-node\" };",
			"    });",
			"",
			"    if (env.IsDevelopment())",
			"    {",
			"        spa.UseAngularCliServer(npmScript: \"start\");",
			"        //spa.UseProxyToSpaDevelopmentServer(\"http://localhost:4200\");",
			"    }",
			"});"
		],
		"description": "Startup: app.UseSpa()"
	},
	"ac-middleware-convention": {
		"prefix": "ac-middleware-1",
		"body": [
			"using System;",
			"using System.Threading.Tasks;",
			"using Microsoft.AspNetCore.Http;",
			"",
			"namespace ${1:${TM_DIRECTORY/^.*[\\\\\\/]([^\\\\\\\\/]+)$/$1/}}.Middleware",
			"{",
			"    public class ${2:CustomName}Middleware",
			"    {",
			"        private readonly RequestDelegate _next;",
			"",
			"        // \"Scoped\" SERVICE SHOULDN'T DO CONSTRUCTOR DI!!",
			"        public ${2}Middleware(RequestDelegate next)",
			"        {",
			"            _next = next;",
			"        }",
			"",
			"        public async Task InvokeAsync(HttpContext context)",
			"        {",
			"            $0",
			"            await _next(context);",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "implement Middleware by convention"
	},
	"ac-middleware-interface": {
		"prefix": "ac-middleware-2",
		"body": [
			"using System;",
			"using System.Threading.Tasks;",
			"using Microsoft.AspNetCore.Http;",
			"",
			"namespace ${1:${TM_DIRECTORY/^.*[\\\\\\/]([^\\\\\\\\/]+)$/$1/}}.Middleware",
			"{",
			"    public class IMiddlewareMiddleware : IMiddleware",
			"    {",
			"        // IMiddleware is activated per request, ",
			"        // so scoped services can be injected into the middleware's constructor.",
			"        public IMiddlewareMiddleware()",
			"        {",
			"        }",
			"",
			"        public async Task InvokeAsync(HttpContext context, RequestDelegate next)",
			"        {",
			"            $0",
			"            await next(context);",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "implement Middleware by using IMiddleware"
	},
	"UseDefaultFiles": {
		"prefix": "app-use-defaultfiles",
		"body": [
			"DefaultFilesOptions dfOptions = new DefaultFilesOptions();",
			"dfOptions.DefaultFileNames.Clear();",
			"dfOptions.DefaultFileNames.Add(\"${1:mydefault}.html\");",
			"app.UseDefaultFiles(dfOptions);",
			"$0"
		],
		"description": "Generates app.UseDefaultFiles() with sample code"
	},
	"app-use-staticfiles": {
		"prefix": "app-use-staticfiles",
		"body": [
			"app.UseStaticFiles(new StaticFileOptions",
			"{",
			"    // Requires the following import:",
			"    // ${0}using System.IO;",
			"    // using Microsoft.Extensions.FileProviders;",
			"    FileProvider = new PhysicalFileProvider(",
			"            Path.Combine(Directory.GetCurrentDirectory(), \"wwwroot\", \"${1:images}\")),",
			"    RequestPath = \"/${2:MyImages}\",",
			"        ",
			"    OnPrepareResponse = ctx =>",
			"    {",
			"        ctx.Context.Response.Headers.Append(\"Cache-Control\", \"public,max-age=${3:600}\");",
			"    }",
			"});"
		],
		"description": "Generates app.UseStaticFiles() with sample code"
	},
	"app-use-directorybrowser": {
		"prefix": "app-use-directorybrowser",
		"body": [
			"app.UseDirectoryBrowser(new DirectoryBrowserOptions",
			"{",
			"    // Requires the following import:",
			"    // ${0}using System.IO;",
			"    // using Microsoft.Extensions.FileProviders;",
			"    FileProvider = new PhysicalFileProvider(",
			"            Path.Combine(Directory.GetCurrentDirectory(), \"wwwroot\", \"${1:images}\")),",
			"        RequestPath = \"/${2:MyImages}\"",
			"});"
		],
		"description": "Generates app.UseDirectoryBrowser() with sample code"
	},
	"GetConnectionString": {
		"prefix": "nc-get-connstr",
		"body": [
			"// Remember add the following lines to your *.csproj file",
			"// <ItemGroup>",
			"//   <Content Update=\"appsettings.json\">",
			"//     <CopyToOutputDirectory>Always</CopyToOutputDirectory>",
			"//   </Content>",
			"// </ItemGroup>",
			"",
			"var environmentName = Environment.GetEnvironmentVariable (\"ASPNETCORE_ENVIRONMENT\");",
			"",
			"var builder = new Microsoft.Extensions.Configuration.ConfigurationBuilder()",
			"    .SetBasePath (AppContext.BaseDirectory)",
			"    .AddJsonFile (\"appsettings.json\")",
			"    .AddJsonFile ($\"appsettings.{environmentName}.json\", true)",
			"    .AddEnvironmentVariables();",
			"",
			"var config = builder.Build();",
			"",
			"var ${2:connstr} = config.GetConnectionString (\"${1:DefaultConnection}\");",
			"$0"
		],
		"description": "config.GetConnectionString()"
	}

}